import std::image::{Image, Color}
import std::video_renderer::VideoRenderer
import std::sdl
import @seam_carving::{init_seam_carve, remove_the_seams, remove_the_seams_and_make_it_fun, sobel, SeamDirection}

def main(argc: i32, argv: &str) {
    let bouncy: bool = false
    let fps: u32 = 60
    let filename: str = null
    let out_name: str = "out.mp4"
    let ffmpeg_verbose: bool = false
    let max_seams: u32 = 0
    let use_ffpmeg: bool = false

    let hide_seams_specified: bool = false
    let view_seams_specified: bool = false

    let dir = SeamDirection::Vertical
    let is_square: bool = false

    for let i = 1; i < argc as u32; i += 1 {
        match argv[i] {
            "--bouncy" | "-b" => bouncy = true
            "--fps" => fps = argv[++i].to_u32()
            "--output" | "-o" => out_name = argv[++i]
            "--ffmpeg-verbose" | "-fv" => ffmpeg_verbose = true
            "--num-seams" | "-n" => max_seams = argv[++i].to_u32()
            "--hide-seams" | "-h" => hide_seams_specified = true
            "--view-seams" | "-v" => view_seams_specified = true
            "--ffpmeg" | "-f" => use_ffpmeg = true
            "--horizontal" | "-hz" => dir = Horizontal
            "--square" | "-sq" => is_square = true
            else => {
                if argv[i][0] == '-' {
                    println("Unknown option: %s", argv[i])
                    std::exit(1)
                } else if not filename? {
                    filename = argv[i]
                } else {
                    println("Unknown option/argument: '%s'", argv[i])
                    std::exit(1)
                }
            }
        }
    }

    if not filename? {
        println("No file specified")
        std::exit(1)
    }

    let img = Image::load(filename)
    if img.height % 2 != 0 or img.width % 4 != 0 {
        let new_height = img.height - (img.height % 2)
        let new_width = img.width - (img.width % 4)
        let resized = img.resize(new_width, new_height)
        img.free()
        img = resized
    }

    println(`Image size: {img.width} x {img.height}`)

    init_seam_carve()

    if is_square {
        if img.width > img.height {
            dir = Vertical
            max_seams = img.width - img.height
        } else if img.height > img.width {
            dir = Horizontal
            max_seams = img.height - img.width
        } else {
            println("Image is already square")
            std::exit(0)
        }
    }

    if max_seams == 0 {
        max_seams = match dir {
            Horizontal => img.height - 2
            Vertical => img.width - 2
        }
    }

    let show_seams: bool = not bouncy
    if view_seams_specified {
        show_seams = true
    } 
    if hide_seams_specified {
        show_seams = false
    }

    let renderer = VideoRenderer::create(
        if use_ffpmeg then FFMPEG else SDL,
        img.width, 
        img.height, 
        fps, 
        out_name, 
        ffmpeg_verbose
    )

    if bouncy {
        img = remove_the_seams_and_make_it_fun(dir, img, max_seams, show_seams, renderer)
    } else {
        img = remove_the_seams(dir, img, max_seams, show_seams, renderer)
    }
    img.free()

    if renderer.type == SDL {
        let quit = false
        while not quit {
            let e: sdl::Event
            while sdl::poll_event(&e) {
                match e.type {
                    Quit => quit = true
                    KeyDown => {
                        match e.key.keysym.scancode {
                            Q | Escape => quit = true
                            else => {}
                        }
                    }
                    else => {}
                }
            }
        }
    }
    renderer.finish()
}