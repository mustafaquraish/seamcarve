import std::image::{Image, Color}
import std::video_renderer::VideoRenderer
import std::sdl
import @seam_carving::{this, remove_the_seams, draw_the_seams, add_the_seams, remove_the_seams_and_make_it_fun, Direction}

enum RenderMode {
    SDL
    FFMPEG
    None
}

enum Operation {
    AddSeams
    RemoveSeams
    DrawSeams
}

def usage(code: i32) {
    println("Usage: seam_carving [options] <filename>")
    println("Options:")
    println("  -b, --bouncy: Make the seams bounce around")
    println("  --speed <fps>: Set the speed of the animation (default: 60)")
    println("  -o, --output <filename>: Set the output filename (default: out.mp4)")
    println("  -fv, --ffmpeg-verbose: Print ffmpeg output")
    println("  -n, --num-seams <n>: Set the number of seams to remove (default: all)")
    println("  -hs, --hide-seams: Hide the seams")
    println("  -vs, --view-seams: Show the seams (default)")
    println("  -f, --ffmpeg: Render using ffmpeg")
    println("  -s, --sdl: Render using SDL (default)")
    println("  -a, --add: Add seams instead of removing them")
    println("  -d, --draw: Draw all the seams")
    println("  -nr, --no-render: Don't render the video")
    println("  -m, --mask <filename>: Use a mask to specify which pixels to remove")
    println("  -nm, --neg-mask: Use a mask to specify which pixels to keep")
    println("  --axis <axis>: Set the axis to remove seams from (default: horizontal)")
    println("  -v, --vertical: Set the axis to vertical")
    println("  -sq, --square: Make the image square")
    println("  --explain: Explain what's going on")
    println("  -i, --inverse: Use inverse energy")
    println("  -p, --percent <n>: Set the number of seams to remove as a percentage of the image size")
    std::exit(code)
}

def main(argc: i32, argv: &str) {
    let bouncy: bool = false
    let speed_fps: f32 = 60.0
    let filename: str = null
    let out_name: str = "out.mp4"
    let ffmpeg_verbose: bool = false
    let max_seams: u32 = 0
    let explain: bool = false

    let render_mode = RenderMode::SDL
    let op = Operation::RemoveSeams

    let hide_seams_specified: bool = false
    let view_seams_specified: bool = false
    let inverse_energy: bool = false

    let dir = Direction::Horizontal
    let is_square: bool = false
    let mask_filename: str = null
    let percent_change: f32 = -1.0
    let negative_mask: bool = false

    for let i = 1; i < argc as u32; i += 1 {
        match argv[i] {
            "--bouncy" | "-b" => bouncy = true
            "--speed" => speed_fps *= argv[++i].to_f32()
            "--output" | "-o" => out_name = argv[++i]
            "--ffmpeg-verbose" | "-fv" => ffmpeg_verbose = true
            "--num-seams" | "-n" => max_seams = argv[++i].to_u32()
            "--hide-seams" | "-hs" => hide_seams_specified = true
            "--view-seams" | "-vs" => view_seams_specified = true
            "--ffpmeg" | "-f" => render_mode = FFMPEG
            "--sdl" | "-s" => render_mode = SDL
            "--add" | "-a" => op = AddSeams
            "--draw" | "-d" => op = DrawSeams
            "--no-render" | "-nr" => render_mode = None
            "--mask" | "-m" => mask_filename = argv[++i]
            "--neg-mask" | "--nmask" | "--negative-mask" | "-nm" => {
                mask_filename = argv[++i]
                negative_mask = true
            }
            "--axis" => {
                match argv[++i] {
                    "horizontal" | "h" | "x" => dir = Horizontal
                    "vertical" | "v" | "y" => dir = Vertical
                    else => {
                        println("Unknown axis: '%s'", argv[i])
                        std::exit(1)
                    }
                }
            }
            "--vertical" | "-v" => dir = Vertical
            "--square" | "-sq" => is_square = true
            "--explain" => explain = true
            "--inverse" | "-i" | "--fuck-it-up" => inverse_energy = true
            "--percent" | "-p" => {
                let pct = argv[++i].to_f32()
                if pct < 0.0 or pct > 100.0 {
                    println(`ERROR: Invalid argument to --percent flag: {argv[i]}: Must be between 0 and 100`)
                    std::exit(0)
                }
                percent_change = pct
            }
            "--help" => usage(0)
            else => {
                if argv[i][0] == '-' {
                    println("Unknown option: %s", argv[i])
                    std::exit(1)
                } else if not filename? {
                    filename = argv[i]
                } else {
                    println("Unknown option/argument: '%s'", argv[i])
                    usage(1)
                }
            }
        }
    }

    if not filename? {
        println("No file specified")
        std::exit(1)
    }

    let img = Image::load(filename)
    let mask = null as &Image

    if mask_filename? {
        mask = Image::load(mask_filename)
        if mask.width != img.width or mask.height != img.height {
            println(`ERROR: Mask specified does not match image dimensions!`)
            println(`  Image size: {img.width}, {img.height}`)
            println(`   Mask size: {mask.width}, {mask.height}`)
            std::exit(1)
        }

        for let y = 0; y < mask.height; y += 1 {
            for let x = 0; x < mask.width; x += 1 {
                let c = mask.get(x, y)
                let new_col = if c.r < 100 {
                    yield Color(128, 128, 128)
                } else if negative_mask {
                    yield Color(0, 0, 0)
                } else {
                    yield Color(255, 255, 255)
                }
                mask.set(x, y, new_col)
            }
        }
    }


    if img.height % 2 != 0 or img.width % 4 != 0 {
        let new_height = img.height - (img.height % 2)
        let new_width = img.width - (img.width % 4)
        let resized = img.resize(new_width, new_height)
        img.free()
        img = resized

        if mask? {
            let resized = mask.resize(new_width, new_height)
            mask.free()
            mask = resized
        }
    }

    println(`Image size: {img.width} x {img.height}`)

    if is_square {
        if img.width > img.height {
            dir = Vertical
            max_seams = img.width - img.height
        } else if img.height > img.width {
            dir = Horizontal
            max_seams = img.height - img.width
        } else {
            println("Image is already square")
            std::exit(0)
        }
    }

    if max_seams == 0 {
        let N = match dir {
            Horizontal => img.width - 2
            Vertical => img.height - 2
        }
        if percent_change > 0.0 {
            max_seams = (N as f32 * percent_change / 100.0) as u32
        } else {
            max_seams = N
        }
    }

    let show_seams: bool = not bouncy
    if view_seams_specified {
        show_seams = true
    }
    if hide_seams_specified {
        show_seams = false
    }

    let screen_width = img.width
    let screen_height = img.height

    if op == AddSeams {
        if dir == Vertical {
            screen_height += max_seams
        } else {
            screen_width += max_seams
        }
    }

    assert speed_fps > 1.0, "Speed must be greater than 1.0"

    let renderer = match render_mode {
        None => null as &VideoRenderer
        else => VideoRenderer::create(
            if render_mode == FFMPEG then FFMPEG else SDL,
            screen_width,
            screen_height,
            speed_fps as u32,
            out_name,
            ffmpeg_verbose
        )
    }

    seam_carving::set_options(inverse_energy: inverse_energy)

    match op {
        AddSeams => img = add_the_seams(dir, img, mask, max_seams, show_seams, renderer)
        DrawSeams => img = draw_the_seams(dir, img, mask, max_seams, renderer)
        RemoveSeams => {
            if bouncy {
                img = remove_the_seams_and_make_it_fun(dir, img, mask, max_seams, show_seams, renderer)
            } else {
                img = remove_the_seams(dir, img, mask, max_seams, show_seams, explain, renderer)
            }
        }
    }

    img.save("output.qoi")
    img.free()

    if renderer? and renderer.type == SDL {
        let quit = false
        while not quit {
            let e: sdl::Event
            while sdl::poll_event(&e) {
                match e.type {
                    Quit => quit = true
                    KeyDown => {
                        match e.key.keysym.scancode {
                            Q | Escape => quit = true
                            else => {}
                        }
                    }
                    else => {}
                }
            }
        }
    }
    if renderer? then renderer.finish()
}