import std::image::{Image, Color}
import std::heap::Heap
import std::deque::Deque
import std::set::Set
import std::vector::Vector
import std::video_renderer::VideoRenderer

@compiler c_flag "-O3"

let opt_inverse_energy: bool = false

def idx(img: &Image, x:u32, y:u32): u32 => img.width * y + x

def abs_sub(a: u32, b: u32): u32 => if a > b then a - b else b - a

def set_options(inverse_energy: bool) {
    opt_inverse_energy = inverse_energy
}

def get_energy(img: &Image, mask: &Image): &Image {
    let out = Image::new(img.width, img.height)

    let m = std::new<u32>(img.width * img.height) as &[u32; img.width]
    let energy = std::new<u32>(img.width * img.height) as &[u32; img.width]
    let I = std::new<u32>(img.width * img.height) as &[u32; img.width]
    defer std::libc::free(m)
    defer std::libc::free(energy)
    defer std::libc::free(I)

    for let i = 0; i < img.height; ++i {
        for let j = 0; j < img.width; ++j {
            let col = img.get(j, i)
            let r = col.r as u32
            let g = col.g as u32
            let b = col.b as u32
            I[i][j] = (r + g + b) / 3
        }
    }

    let cULR: [u32; 3]
    let mULR: [u32; 3]

    for let i = 1; i < img.height; ++i {
        for let j = 0; j < img.width; ++j {
            let up = (i+img.height-1) %img.height
            let down = (i+1) % img.height
            let left = (j+img.width-1) % img.width
            let right = (j+1) % img.width

            cULR[0] = abs_sub(I[i][right], I[i][left])
            cULR[1] = abs_sub(I[up][j], I[i][left]) + cULR[0]
            cULR[2] = abs_sub(I[up][j], I[i][right]) + cULR[0]

            mULR[0] = m[up][j] + cULR[0]
            mULR[1] = m[up][left] + cULR[1]
            mULR[2] = m[up][right] + cULR[2]

            let a_min = 0
            let v_min = mULR[0]
            if mULR[1] < v_min { a_min = 1; v_min = mULR[1]; }
            if mULR[2] < v_min { a_min = 2; v_min = mULR[2]; }

            m[i][j] = v_min
            energy[i][j] = cULR[a_min]
        }
    }

    for let i = 0; i < img.height; ++i {
        for let j = 0; j < img.width; ++j {
            let e = energy[i][j]
            if opt_inverse_energy then e = 255 - e

            let col = Color(e as u8, e as u8, e as u8)
            out.set(j, i, col)

            if mask? {
                let col = mask.get(j, i)
                if col.r > 128 {  // Some arbitrary threshold
                    out.set(j, i, Color(0, 255, 0))
                } else if col.r < 128 {
                    out.set(j, i, Color(255, 0, 0))
                }
            }
        }
    }

    return out
}


def dp_get(dp: &i32, img: &Image, x: u32, y: u32): i32 {
    assert x < img.width and y < img.height
    return dp[idx(img, x, y)]
}

def find_minimum_seam(img: &Image): &Vector<u32> {
    let seam = Vector<u32>::new()

    let dp = std::new<i32>(img.width * img.height)
    let backtrack = std::new<u32>(img.width * img.height)
    defer std::libc::free(dp)
    defer std::libc::free(backtrack)

    for let i = 1; i < img.height; ++i {
        for let j = 0; j < img.width; ++j {
            let ix = idx(img, j, i)
            let col = img.get(j, i)

            dp[ix] = img.get(j, i).g as i32
            if not (col.r == col.g == col.b) {
                if col.r > 0 {
                    dp[ix] = -10000
                } else if col.g > 0 {
                    dp[ix] = 10000
                }
            }
        }
    }

    for let i = 1; i < img.height; ++i {
        for let j = 0; j < img.width; ++j {
            let ix = idx(img, j, i)

            let j0 = if j == 0 then j else j-1

            let amin = j0
            let jmin = dp_get(dp, img, j0, i-1)

            if j0 < img.width - 1 and dp_get(dp, img, j0 + 1, i-1) < jmin {
                amin = j0 + 1
                jmin = dp_get(dp, img, j0 + 1, i-1)
            }
            if j0 < img.width - 2 and dp_get(dp, img, j0 + 2, i-1) < jmin {
                amin = j0 + 2
                jmin = dp_get(dp, img, j0 + 2, i-1)
            }

            backtrack[ix] = amin
            let min_energy = dp_get(dp, img, amin, i-1)
            dp[ix] += min_energy
        }
    }

    let min_energy_x = 0
    for let j = 0; j < img.width; ++j {
        if dp[idx(img, j, img.height - 1)] < dp[idx(img, min_energy_x, img.height - 1)] {
            min_energy_x = j
        }
    }

    let height = img.height - 1
    let ix = idx(img, min_energy_x, height)
    while true {
        seam.push(min_energy_x)
        min_energy_x = backtrack[ix]
        if height == 0 then break
        height -= 1
        ix = idx(img, min_energy_x, height)
    }

    return seam
}

def delete_seam(img: &Image, seam: &Vector<u32>): &Image {
    let out = Image::new(img.width - 1, img.height)
    for let y = 0; y < img.height; ++y {
        let seam_x = seam.at(img.height - y - 1)
        let out_x = 0
        for let x = 0; x < img.width; ++x {
            if x == seam_x then continue
            let col = img.get(x, y)
            out.set(out_x, y, col)
            out_x += 1
        }
    }
    return out
}

def add_seam(img: &Image, seam: &Vector<u32>): &Image {
    let out = Image::new(img.width + 1, img.height)
    for let y = 0; y < img.height; ++y {
        let seam_x = seam.at(img.height - y - 1)
        let out_x = 0
        for let x = 0; x < img.width; ++x {

            if x == seam_x then {
                let r = 0
                let g = 0
                let b = 0

                let j0 = x
                if x > 0 then j0 -= 1

                let j1 = j0 + 1
                if j1 < img.width - 1 then j1 += 1

                for let j = j0; j < j1; ++j {
                    let col = img.get(j, y)
                    r += col.r as u32
                    g += col.g as u32
                    b += col.b as u32
                }

                r /= (j1 - j0) as u32
                g /= (j1 - j0) as u32
                b /= (j1 - j0) as u32

                let col = Color(r as u8, g as u8, b as u8)
                out.set(out_x, y, col)
                out_x += 1
            }

            let col = img.get(x, y)
            out.set(out_x, y, col)
            out_x += 1
        }
    }
    return out
}

def draw_seam_on_image(img: &Image, seam: &Vector<u32>) {
    for let y = 0; y < img.height; ++y {
        let seam_x = seam.at(img.height - y - 1)
        let col = Color(255, 0, 0)
        img.set(seam_x, y, col)
    }
}

enum Direction {
    Horizontal
    Vertical
}

def render_image(dir: Direction, img: &Image, renderer: &VideoRenderer) {
    if not renderer? then return

    match dir {
        Vertical => {
            let tmp = img.rotate(CounterClockwise)
            renderer.send_frame(tmp)
            tmp.free()
        }
        Horizontal => {
            renderer.send_frame(img)
        }
    }
}

def flip_image_if_needed(dir: Direction, img: &&Image, mask: &&Image) {
    let img_orig = *img
    let mask_orig = *mask

    if dir == Vertical {
        *img = img_orig.rotate(Clockwise)
        img_orig.free()

        if mask_orig? then {
            *mask = mask_orig.rotate(Clockwise)
            mask_orig.free()
        }
    }
}

def unflip_if_needed_and_return(dir: Direction, img: &Image): &Image {
    if dir == Vertical {
        let new = img.rotate(CounterClockwise)
        img.free()
        return new
    } else {
        return img
    }
}

def get_list_of_seams(dir: Direction, img: &Image, mask: &Image, num_seams: u32, renderer: &VideoRenderer): &Vector<&Vector<u32>> {
    let tmp_img = img.copy()

    let seams_list = Vector<&Vector<u32>>::new()
    for let i = 0; i < num_seams; ++i {
        let out = get_energy(tmp_img, mask)
        let seam = find_minimum_seam(out)
        seams_list.push(seam)
        out.free()

        draw_seam_on_image(tmp_img, seam)
        render_image(dir, tmp_img, renderer)

        let seamless_img = delete_seam(tmp_img, seam)
        tmp_img.free()
        tmp_img = seamless_img

        if mask? {
            let seamless_mask = delete_seam(mask, seam)
            mask.free()
            mask = seamless_mask
        }
    }

    tmp_img.free()
    return seams_list
}

def draw_the_seams(dir: Direction, img: &Image, mask: &Image, num_seams: u32, renderer: &VideoRenderer = null): &Image {
    flip_image_if_needed(dir, &img, &mask)
    let seams_list = get_list_of_seams(dir, img, mask, num_seams, renderer)

    for let i = 0; i < seams_list.size; ++i {
        let seam = seams_list.at(i)
        draw_seam_on_image(img, seam)
        render_image(dir, img, renderer)

        for let j = i + 1; j < seams_list.size; ++j {
            let other_seam = seams_list.at(j)
            for let k = 0; k < other_seam.size; ++k {
                if other_seam.at(k) >= seam.at(k) then {
                    other_seam.data[k] += 1
                }
            }
        }

        seam.free()
    }

    seams_list.free()
    render_image(dir, img, renderer)

    return unflip_if_needed_and_return(dir, img)
}


def add_the_seams(dir: Direction, img: &Image, mask: &Image, num_seams: u32, show_seams: bool, renderer: &VideoRenderer = null): &Image {
    flip_image_if_needed(dir, &img, &mask)
    let seams_list = get_list_of_seams(dir, img, mask, num_seams, renderer)

    for let i = 0; i < seams_list.size; ++i {
        let seam = seams_list.at(i)
        let new_img = add_seam(img, seam)
        draw_seam_on_image(img, seam)
        render_image(dir, img, renderer)
        img.free()
        img = new_img

        for let j = i+1; j < seams_list.size; ++j {
            let other_seam = seams_list.at(j)
            for let k = 0; k < other_seam.size; ++k {
                if other_seam.at(k) >= seam.at(k) then {
                    other_seam.data[k] += 2
                }
            }
        }
        seam.free()
    }

    seams_list.free()

    render_image(dir, img, renderer)
    return unflip_if_needed_and_return(dir, img)
}

def remove_the_seams(dir: Direction, img: &Image, mask: &Image, num_seams: u32, show_seams: bool, explain: bool, renderer: &VideoRenderer = null): &Image {
    flip_image_if_needed(dir, &img, &mask)

    for let i = 0; i < num_seams; ++i {
        let out = get_energy(img, mask)
        let seam = find_minimum_seam(out)

        if explain {
            draw_seam_on_image(out, seam)
            render_image(dir, out, renderer)

        } else {
            if show_seams then draw_seam_on_image(img, seam)
            render_image(dir, img, renderer)
        }
        out.free()

        let seamless_img = delete_seam(img, seam)
        img.free()
        img = seamless_img

        if mask? {
            let seamless_mask = delete_seam(mask, seam)
            mask.free()
            mask = seamless_mask
        }

        seam.free()
    }

    render_image(dir, img, renderer)

    if mask? then mask.free()

    return unflip_if_needed_and_return(dir, img)
}

def remove_the_seams_and_make_it_fun(dir: Direction, img: &Image, mask: &Image, num_seams: u32, show_seams: bool, renderer: &VideoRenderer = null): &Image {
    flip_image_if_needed(dir, &img, &mask)

    let backlog = Deque<&Image>::new()
    let backlog_counter = img.width/5
    let max_backlog = 500
    let counter = 0

    for let i = 0; i < num_seams; ++i {
        let out = get_energy(img, mask)
        let seam = find_minimum_seam(out)
        out.free()

        if show_seams then draw_seam_on_image(img, seam)
        render_image(dir, img, renderer)

        backlog.push_back(img)
        counter += 1
        if counter == backlog_counter {
            counter = 0

            for let i = 0i32; i < (backlog.size as i32) - (max_backlog as i32); ++i {
                let img = backlog.pop_front()
                img.free()
            }

            for let i = 0; i < backlog.size; ++i {
                let img = backlog.at(backlog.size - i - 1)
                render_image(dir, img, renderer)
            }
            for let i = 0; i < backlog.size; ++i {
                let img = backlog.at(i)
                render_image(dir, img, renderer)
            }
        }

        let seamless_img = delete_seam(img, seam)
        img = seamless_img

        if mask? {
            let seamless_mask = delete_seam(mask, seam)
            mask.free()
            mask = seamless_mask
        }

        seam.free()
    }

    render_image(dir, img, renderer)

    for let i = 0; i < backlog.size; ++i {
        backlog.at(i).free()
    }

    return unflip_if_needed_and_return(dir, img)
}


